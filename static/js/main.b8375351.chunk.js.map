{"version":3,"sources":["components/RomanticComedy/RomanticComedyList.js","reducers/romanticComedy/romanticComedyReducer.js","components/RomanticComedy/RomanticComedy.js","App.js","reducers/root/rootReducer.js","reducers/romanticComedy/romanticComedySaga.js","reducers/root/rootSaga.js","config/store.js","serviceWorker.js","index.js"],"names":["RomanticComedyList","_this","this","window","addEventListener","props","page","innerHeight","Math","round","document","documentElement","scrollTop","scrollingElement","scrollHeight","fetchMoreData","react_default","a","createElement","style","width","margin","display","Grid","container","spacing","ref","comedyList","length","map","item","index","md","sm","xs","key","src","process","maxWidth","height","alt","Typography","gutterBottom","variant","component","textAlign","color","name","Component","fetchRComedyRequest","createAction","fetchRComedySuccess","fetchRComedyFailure","handleActions","_handleActions","Object","defineProperty","state","_ref","payload","newComedies","comedies","concat","update","$set","_ref2","error","RomanticComedy","onFetchRComedy","callback","err","res","setState","_this2","Fragment","RomanticComedy_RomanticComedyList","connect","romanticComedy","App","components_RomanticComedy_RomanticComedy","rootReducer","combineReducers","romanticComedyReducer","fetchRComedyWorker","romanticComedySaga","data","regenerator_default","wrap","_context","prev","next","t0","page1Data","content","abrupt","page2Data","page3Data","put","t1","message","stop","_marked","_context2","all","takeEvery","_marked2","rootSaga","rootSaga_marked","composeEnhancers","compose","sagaMiddleware","createSagaMiddleware","middleware","store","createStore","applyMiddleware","apply","run","Boolean","location","hostname","match","ReactDOM","render","es","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b8375351.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\n\r\nclass RomanticComedyList extends Component {\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', () => {\r\n            if (this.props.page <= 3 && window.innerHeight + Math.round(document.documentElement.scrollTop) === document.scrollingElement.scrollHeight) {\r\n                this.props.fetchMoreData();\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ width: \"80%\", margin: \"auto\", display: \"flex\" }}>\r\n                <Grid container spacing={3} ref=\"listScroll\">\r\n                    {this.props.comedyList && this.props.comedyList.length > 0 ?\r\n                        this.props.comedyList.map((item, index) => (\r\n                            <Grid item md={3} sm={3} xs={12} key={index}>\r\n                                <img src={process.env.PUBLIC_URL + '/Slices/' + item[\"poster-image\"]} style={{ maxWidth: \"100%\", width: \"100%\", height: \"auto\" }} alt={\"hello\"} />\r\n                                <Typography gutterBottom variant=\"h5\" component=\"h2\" style={{ textAlign: \"center\", color: \"gray\" }}>\r\n                                    {item.name}\r\n                                </Typography>\r\n                            </Grid>\r\n\r\n                        )) : \"No Data Found\"}\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RomanticComedyList;","import { createAction, handleActions } from 'redux-actions';\r\nimport update from 'immutability-helper';\r\n\r\n\r\n/*********************************************************************************/\r\nexport const fetchRComedyRequest = createAction('FETCH_RCOMEDY_REQUEST');\r\nexport const fetchRComedySuccess = createAction('FETCH_RCOMEDY_SUCCESS');\r\nexport const fetchRComedyFailure = createAction('FETCH_RCOMEDY_FAILURE');\r\n\r\n\r\nconst initialState = {\r\n    comedies: [],\r\n    error: null\r\n};\r\n\r\nexport default handleActions({\r\n    [fetchRComedyRequest]: state => state,\r\n    [fetchRComedySuccess]: (state, { payload }) => {\r\n        const comedies = state.comedies;\r\n        const newComedies = comedies.concat(payload);\r\n        return update(state, {\r\n            comedies: { $set: newComedies }\r\n        })\r\n    },\r\n    [fetchRComedyFailure]: (state, { payload }) =>\r\n        update(state, {\r\n            error: { $set: payload },\r\n\r\n        })\r\n},\r\n    initialState\r\n);\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport RomanticComedyList from \"./RomanticComedyList\";\r\nimport { connect } from 'react-redux';\r\nimport { fetchRComedyRequest } from \"../../reducers/romanticComedy/romanticComedyReducer\";\r\n\r\nclass RomanticComedy extends Component {\r\n    state = {\r\n        page: 1\r\n    }\r\n    componentDidMount() {\r\n        this.props.onFetchRComedy({\r\n            page: 1, callback: (err, res) => {\r\n                if (res) {\r\n                    this.setState({ page: this.state.page + 1 });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    fetchMoreData = () => {\r\n        this.props.onFetchRComedy({\r\n            page: this.state.page, callback: (err, res) => {\r\n                if (res) {\r\n                    this.setState({ page: this.state.page + 1 });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <RomanticComedyList comedyList={this.props.comedies} fetchMoreData={this.fetchMoreData} page={this.state.page} />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        comedies: state.romanticComedy.comedies\r\n    }),\r\n    {\r\n        onFetchRComedy: fetchRComedyRequest\r\n    }\r\n)(RomanticComedy);","import React from 'react';\r\nimport RomanticComedyList from \"./components/RomanticComedy/RomanticComedy\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <RomanticComedyList />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport romanticComedyReducer from '../romanticComedy/romanticComedyReducer';\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n  romanticComedy: romanticComedyReducer\r\n});\r\n","import page1Data from \"../../API/CONTENTLISTINGPAGE-PAGE1.json\";\r\nimport page2Data from \"../../API/CONTENTLISTINGPAGE-PAGE2.json\";\r\nimport page3Data from \"../../API/CONTENTLISTINGPAGE-PAGE3.json\";\r\nimport { put, all, takeEvery } from 'redux-saga/effects';\r\n\r\n\r\nimport {\r\n    fetchRComedyRequest,\r\n    fetchRComedySuccess,\r\n    fetchRComedyFailure\r\n} from './romanticComedyReducer';\r\n\r\n/**********************/\r\nfunction* fetchRComedyWorker({ payload }) {\r\n    const { page, callback } = payload\r\n    try {\r\n        let data = null;\r\n        switch (page) {\r\n            case 1:\r\n                data = page1Data.page[\"content-items\"].content;\r\n                break;\r\n            case 2:\r\n                data = page2Data.page[\"content-items\"].content;\r\n                break;\r\n\r\n            case 3:\r\n                data = page3Data.page[\"content-items\"].content;\r\n                break;\r\n            default:\r\n                data = page1Data.page[\"content-items\"].content;\r\n                break;\r\n        }\r\n        if (callback) callback(null, data);\r\n        yield put(fetchRComedySuccess(data));\r\n    } catch (err) {\r\n        if (callback) callback(err.message, null);\r\n        yield put(fetchRComedyFailure(err));\r\n    }\r\n}\r\n\r\nexport function* romanticComedySaga() {\r\n    yield all([\r\n        takeEvery(fetchRComedyRequest, fetchRComedyWorker)\r\n    ]);\r\n}\r\n","import { all } from 'redux-saga/effects';\r\n\r\nimport { romanticComedySaga } from '../romanticComedy/romanticComedySaga';\r\n\r\n\r\nexport function* rootSaga() {\r\n    yield all([romanticComedySaga()]);\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport { rootReducer } from '../reducers/root/rootReducer.js';\r\nimport { rootSaga } from '../reducers/root/rootSaga.js';\r\n\r\nlet composeEnhancers = compose;\r\n\r\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\r\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\r\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\r\n  }\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middleware = [sagaMiddleware];\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(...middleware)));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './config/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}